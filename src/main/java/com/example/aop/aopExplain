AOP（面向切面），这玩意我举个例子说下，
      比如你写了个方法用来做一些事情，但这个事情要求登录用户才能做，你就可以在这个方法执行前验证一下，执行后记录下操作日志，把前后的这些与业务逻辑无关的代码抽取出来放一个类里，
      这个类就是切面（Aspect），这个被环绕的方法就是切点（Pointcut），你所做的执行前执行后的这些方法统一叫做增强处理（Advice）。



Spring AOP是基于动态代理的，基于两种动态代理机制：
    JDK代理：基于接口的代理，一定是基于接口，会生成目标对象的接口类型的子对象。

实现原理如下:
   (1)通过反射获取被代理对象, 以及它的所有的接口的引用
   (2)动态生成java源代码, 在代码中加入需要增强的逻辑并且调用被代理类的方法, 同时新的类要实现被代理类实现的所有接口, 由(1)中获取的就可以编写
   (3)编译动态生成的.java文件, 从而生成.class文件
   (4)将.class文件通过ClassLoader加载到JVM中运行

    Cglib代理：基于类的代理，不需要基于接口，会生成目标对象类型的子对象。实现字节码增强